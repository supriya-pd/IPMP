#include <bits/stdc++.h>

using namespace std;


class Solution{
public:
	
	int findMaximum(int arr[], int n) {
	    return findMaximum(arr,0,n-1);
	}
	int findMaximum(int arr[], int low, int high)
{
 

    if (low == high)
        return arr[low];
     
    if ((high == low + 1) && arr[low] >= arr[high])
        return arr[low];
     
    
    if ((high == low + 1) && arr[low] < arr[high])
        return arr[high];
     
    int mid = (low + high)/2;
 
    if ( arr[mid] > arr[mid + 1] && arr[mid] > arr[mid - 1])
        return arr[mid];
     
   
    if (arr[mid] > arr[mid + 1] && arr[mid] < arr[mid - 1])
        return findMaximum(arr, low, mid-1);
      
    else
        return findMaximum(arr, mid + 1, high);
}
};



int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        cin >> n;
        int arr[n];
        for (i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.findMaximum(arr, n);
        cout << ans << "\n";
    }
    return 0;
}
 
done on gfg --bitonic point question