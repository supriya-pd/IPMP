The Floyd Warshall Algorithm is for solving the All Pairs Shortest Path problem. 
The problem is to find shortest distances between every pair of vertices in a given edge weighted directed Graph

input is graph g(VxV) - each row considers that vertex as source - no edge values are infinity and 0 only for i=j and if there's an edge - weight of edge is ther

first initialize solution matrix with graph matrix - then considering each vertex as intermediate for everyi,j pair,update 

#include <bits/stdc++.h>  // TC O(V^3)
using namespace std;

#define V 4
#define INF INT_MAX
void printSolution(int dist[][V])
{

    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                cout << "INF"<< "     ";
            else
                cout << dist[i][j] << "     ";
        }
        cout << endl;
    }
}
void floyd(int graph[][V])
{
	int dist[V][V], i, j, k;
	 for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            dist[i][j] = graph[i][j];
            
    for(k=0;k<V;k++)   // considering every vertexas intermediate
    {
    	for(i=0;i<V;i++)
    	{
    		for(j=0;j<V;j++)
    		{
    			if(dist[i][j] > (dist[i][k]+dist[k][j]) && dist[i][k]!=INF && dist[k][j]!=INF)  // last two conditions to avoid arithmetic overflow
    			{
    				dist[i][j] = dist[i][k]+dist[k][j];
				}
			}
		}
	}
	
	printSolution(dist);
}
int main()
{
	 int graph[V][V] = { { 0, 5, INF, 10 },
                        { INF, 0, 3, INF },
                        { INF, INF, 0, 1 },
                        { INF, INF, INF, 0 } };
    floyd(graph);
 
}