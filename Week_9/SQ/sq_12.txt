implement three stacks in one array

#include <bits/stdc++.h>
using namespace std;

class kStacks{
	int k;
	int size;
	int *arr;
	// 2 extra data structures
	int *top;
	int *next;
	// one xtra variable free which stores top of free stack
	int free;
	public:
		kStacks(int n,int k)
		{
			this->k=k;
			this->size=n;
			arr=new int[size];
			top=new int[k];  // stores top of k stcacks from 0 to n-1;
			next=new int[n]; 
			
			// initialize all stacks as empty
			for(int i=0;i<k;i++)
			top[i]=-1;
			
			//initialize next array with i+1
			for(int i=0;i<n-1;i++)
			{
				next[i]=i+1;   // bec it answers this index is filled which is next free index
			}
			next[n-1]=-1; // -1 means end of list
			free = 0;
		}
		void push(int x,int sn);  // sn is between 0 and k-1 inclusive
		int pop(int sn);
		bool isEmpty(int sn)
		{
			return top[sn]==-1;   // if top[sn] is -1 clearly empty 
		}
		bool isFull()
		{
			return free==-1; // if free is -1 stack is full
		}
};

void kStacks::push(int x,int sn)
{
	if(isFull())
	{
		cout<<"Stack Overflow";
		exit(1);
	}
	int i = free; // store free slot - it is utilized
	
	free = next[i]; // update free to next free slot
	
	arr[i]=x;
	next[i]=top[sn];
	top[sn]=i;	
}
int kStacks::pop(int sn)
{
	if(isEmpty(sn))
	{
		cout<<"Stack Underflow";
		exit(1);
	}
	int i = top[sn]; // get the top because popping from top
	top[sn]=next[i];
	next[i]=free;
	free=i;
	return arr[i];
}
int main()
{
	int k=3;
	int n=10;
	kStacks ks(n,k);

  
    // Let us put some items in stack number 2
    ks.push(15, 2);
    ks.push(45, 2);
  
    // Let us put some items in stack number 1
    ks.push(17, 1);
    ks.push(49, 1);
    ks.push(39, 1);
  
    // Let us put some items in stack number 0
    ks.push(11, 0);
    ks.push(9, 0);
    ks.push(7, 0);
  
    cout << "Popped element from stack 2 is " << ks.pop(2) << endl;
    cout << "Popped element from stack 1 is " << ks.pop(1) << endl;
    cout << "Popped element from stack 0 is " << ks.pop(0) << endl;
}