There was no problem called swap even and odd nodes--so this is rearrange alternatingly even and odd nodes in a singly linked list
done on ide


#include <bits/stdc++.h>
using namespace std;
  
struct Node {
    int data;
    struct Node* next;
    Node(int x)
    {
    	this->data=x;
    	this->next=NULL;
	}
};

void printList(Node* node)
{
    while (node != NULL) {
        cout << node->data << " ";
        node = node->next;
    }
    cout << endl;
}
Node *AlternateMerge(Node *a,Node *b)
{
	Node *result=a;
	Node *prev=NULL;
	while(a && b)
	{
		Node *a_next=a->next; Node *b_next=b->next;
	    a->next=b;
	    b->next=a_next;
	    prev=b;
	    a=a_next;
	    if(a)
	    prev=a;
	    b=b_next;
	}
	/*if(a)
	prev->next=a->next;*/   //---> this condition isn't needed
	if(b)
	prev->next=b;
	return result;
}
void segregate(Node *head,Node **a_ref,Node **b_ref)
{
	Node *odd=new Node(1);
	Node *even=new Node(0);
	Node *op=odd;
	Node *ep=even;
	Node *ptr=head;
	while(ptr!=NULL)
	{
		if((ptr->data)%2==0)
		{
			even->next=ptr;
			even=even->next;
		}else
		{
			odd->next=ptr;
			odd=odd->next;
		}
		ptr=ptr->next;
	}
	odd->next=NULL;
	even->next=NULL;
	*a_ref=op->next;
	*b_ref=ep->next;
}
void alternateEvenOdd(Node **head_ref)
{
	Node *a,*b;
	segregate(*head_ref,&a,&b);
	*head_ref=AlternateMerge(a,b);
}
int main()
{
    Node* head=new Node(1);
    Node *ptr=head;
    int n;
    cin>>n;
    int x;
    while(n--)
    {
    	cin>>x;
    	ptr->next=new Node(x);
    	ptr=ptr->next;
	}
	head=head->next;
	printList(head);
	alternateEvenOdd(&head);
	printList(head);
    return 0;
}
