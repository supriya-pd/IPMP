Find the row with maximum number of 1s in a 2D row-wise sorted matrix
order is O(m+n)

#include <bits/stdc++.h>
using namespace std;

class Solution{
public:
int firstSearch(vector<int> v,int l,int r)
{
    while(l<=r)
    {
        int m=(l+r)/2;
        if((v[m]==1 && m==0) || (v[m]==1 && v[m-1]!=1))
        return m;
        else if(v[m]<1)
        return firstSearch(v,m+1,r);
        else
        return firstSearch(v,l,m-1);
    }
    return -1;
}
	int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
	    int max_row=0;
	    int j=firstSearch(arr[0],0,m-1);
	    int temp=j;
	    if(j==-1)
	    j=m-1;
	    else
	    j=j-1;
	    for(int i=1;i<n;i++)
	    {
	        while(j>=0 && arr[i][j]==1)
	        {
	            j--;
	            max_row=i;
	        }
	    }
	    if(max_row==0 && temp==-1)
	    max_row=-1;
	    return max_row;
	}

};


int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector< vector<int> > arr(n,vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin>>arr[i][j];
            }
        }
        Solution ob;
        auto ans = ob.rowWithMax1s(arr, n, m);
        cout << ans << "\n";
    }
    return 0;
}
  done on gfg