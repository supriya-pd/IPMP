3 sum problem

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        int n=nums.size();
        vector<int> v;
        for(int i=0;i<n;i++)
        {
            int target=0-nums[i];
            unordered_set<int> s;
            for(int j=i+1;j<n;j++)
            {
                int t=target-nums[j];
                if(s.find(t)!=s.end())
                {
                    v.push_back(t); v.push_back(nums[j]);v.push_back(nums[i]);
                    ans.push_back(v);
                    v.clear();
                }
                else
                s.insert(nums[j]); 
            }
        }
        return ans;
    }
};

This does not handle duplicates 
so next see this

sorting double pointer wala approach

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        int n=nums.size();
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++)
        {
            if(i>0 && nums[i]==nums[i-1])
                continue;
            int target=0-nums[i];
            int ptr1=i+1; int ptr2=n-1;
            while(ptr1<ptr2)
            {
              int sum=nums[ptr1]+nums[ptr2];
              if(sum<target)
                  ptr1++;
              else if(sum>target)
                  ptr2--;
              else
              {
                  ans.push_back(vector<int>{nums[i],nums[ptr1],nums[ptr2]});
                  while(ptr1<ptr2 && nums[ptr1]==nums[ptr1+1])
                      ptr1++;
                  while(ptr1<ptr2 && nums[ptr2]==nums[ptr2-1])
                      ptr2--;
                  ptr1++;
                  ptr2--;
              }
            }
        }
        return ans;
    } 
};

leetcode 15