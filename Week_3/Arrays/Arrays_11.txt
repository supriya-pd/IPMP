hashmap and sorting pointer algos are there to solve in O(n^3)

solve in O(n^2)--by reducing to 2 sum prblm and using hashmap but that won't handle duplicates

so use sorting approach only with 2 pointers

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n=nums.size();
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                int l=j+1;
                int r=n-1;;
                while(l<r)
                {
                int sum=target-nums[i]-nums[j];
                if(nums[l]+nums[r]<sum)
                    l++;
                else if(nums[l]+nums[r]>sum)
                    r--;
                else
                {
                    ans.push_back({nums[i],nums[j],nums[l],nums[r]});
                    while(l<r && nums[r]==nums[r-1])
                        r--;
                    while(l<r && nums[l]==nums[l+1])
                        l++;
                    l++;
                    r--;
                }
                }
                while(j+1<n && nums[j]==nums[j+1])
                        j++;
            }
            while(i+1<n && nums[i]==nums[i+1])
                        i++;
        }
        return ans;
    }
};
leetcode 18
also some good test cases are(2,2,2,2,2) and terget is 5
and [0] target=0

just see the approach of recursion on this problem page leetcode --K sum 