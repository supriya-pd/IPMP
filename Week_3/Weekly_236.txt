1822
1823 - find winner of circular game - queue question- don't introduce linked list
1824 - minimum sideway jumps - a very good example of array preprocessing or dp - because at any point the frog needs to know the nearest obstacle to decide which lane to jump
so, that gives the idea to make 3 lanes array

class Solution {
public:
    void fill_lanes(vector<int>& l,vector<int> obstacles,int o,int n)
    {
        int i;
        for(i=n;i>=0;i--)
        {
            if(obstacles[i]==o)
                break;
        }
        if(i==-1)
            return;
        l[i]=0;
        for(int j=i-1;j>=0;j--)
        {
            if(obstacles[j]==o)
                l[j]=0;
            else
                l[j]=l[j+1]+1;
        }
    }
    int minSideJumps(vector<int>& obstacles) {
        int N = obstacles.size(); // n+1 , points 0 to n
        int s = 0;
        
        int o = 2; // start lane is 2
        int n = N-1;
        // creating 3 vectors l1, l2, l3 - represent lanes, ith index means if I am standing at that point, what is distance of nearest obstacle
        
        vector<int> l1(N,-1);
        vector<int> l2(N,-1);
        vector<int> l3(N,-1);
        
        fill_lanes(l1,obstacles,1,N-1);
        fill_lanes(l2,obstacles,2,N-1);
        fill_lanes(l3,obstacles,3,N-1);
        for(int i=0;i<n;)
        {
            if(obstacles[i+1]==o) // then I have to change lane by performing side jump
            {
                s++; // jumping sideway
                // find next o
               if(l1[i]==-1)
                   o=1;
                else if(l2[i]==-1)
                    o=2;
                else if(l3[i]==-1)
                    o=3;
                else
                {
                    if(l1[i]>l2[i] && l1[i]>l3[i])
                        o=1;
                    else if(l2[i]>l1[i] && l2[i]>l3[i])
                        o=2;
                    else
                        o=3;
                }
                
            }else
                i++; // jumping forward
        }
        return s;
    }
};
-------------------------------------------------------------------------------------

1825 - Finding MK Average - it seems like u have to use priority queue bec heaps question, but actually u needed to use BST, so an ordered_map in STL - 
bec in priority queue, u cannot delete any key, u can only remove the top

class MKAverage {
public:
    int m;
    int k;
    queue<int> q;
    map<int,int> mp;  // ordered map which is BST
    long long int sum = 0;
    MKAverage(int m, int k) {
        this->m=m;
        this->k=k;
        this->sum = 0;
    }
    
    void addElement(int num) {
        q.push(num);
        sum = sum + num;
        mp[num]++;
        if(q.size()>m)
        {
            int f = q.front(); q.pop();
            mp[f]--;
            sum = sum - f;
            if(mp[f]==0)
                mp.erase(f);
        }
    }
    
    int calculateMKAverage() {
        if(q.size()<m)
            return -1;
        long long temp = sum;
        int temp_k = k;
        for(auto it=mp.begin();it!=mp.end();it++) // removing k smallest
        {
            if(temp_k>=it->second)
            {
                temp  = temp - it->first*it->second;
                temp_k = temp_k-it->second;
            }else
            {
                temp = temp - (it->first)*temp_k;
                break;
            }
        }
        temp_k = k;
        for(auto it=mp.rbegin();it!=mp.rend();it++) // removing k largest
        {
            if(temp_k>=it->second)
            {
                temp  = temp - it->first*it->second;
                temp_k = temp_k-it->second;
            }else
            {
                temp = temp - (it->first)*temp_k;
                break;
            }
        }        
        return temp/(m-2*k);
    }
};