pair in bst adding to given sum - leetcode 653

brute force wud be O(n^2)
- or store inorder traversal in an array and then do or
- use a hashmap and while inorder either insert or if sum-node->data is found in map return true
Both take O(n) time and space

one more thing is to do iterative traversal inorder and revserse inorder(right node left) - space is O(logn) or O(H) and it takes O(n) time

this is giving tle - 

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        TreeNode *curr=root;
        TreeNode *curr2=root;
        
        stack<TreeNode*> s;
        stack<TreeNode*> s2;
        
        while((curr || !s.empty()) && (curr2 || !s2.empty()))
        {
            while(curr)
            {
                s.push(curr);
                curr=curr->left;
            }
            curr = s.top(); s.pop();
            while(curr2)
            {
                s2.push(curr2);
                curr2=curr2->right;
            }
            curr2=s2.top(); s2.pop();

            if(curr->val>=curr2->val)
                return false;
            if(curr->val+curr2->val<k)
            {
                curr=curr->right;
            }else if(curr->val+curr2->val>k)
            {
                curr2=curr2->left;
            }else
                return true;
        }
        return false;
    }
};

this got accepted

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        TreeNode *curr=root;
        TreeNode *curr2=root;
        
        stack<TreeNode*> s;
        stack<TreeNode*> s2;
        
        int val1=0;
        int val2=0;
        
        bool done1=false;
        bool done2=false;
        
        while(1)
        {
            while(done1==false)
            {
                if(curr)
                {
                    s.push(curr);
                    curr=curr->left;
                }else
                {
                    if(s.empty())
                        done1=1;
                    else
                    {
                        curr=s.top();s.pop();
                        val1=curr->val;
                        curr=curr->right;
                        done1=1;
                    }
                }
            }
            while(done2==false)
            {
                if(curr2)
                {
                s2.push(curr2);
                curr2=curr2->right;
                }else
                {
                    if(s2.empty())
                        done2=1;
                    else
                    {
                        curr2=s2.top(); s2.pop();
                        val2=curr2->val;
                        curr2=curr2->left;
                        done2=1;
                    }
                }

            }

            if(val1>=val2)
                return false;
            if(val1+val2<k)
            {
                done1=false;
            }else if(val1+val2>k)
            {
                done2=false;
            }else
                return true;
        }
        return false;
    }
};
