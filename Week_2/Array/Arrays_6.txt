Next Smallest Palindrome

#include <bits/stdc++.h>

using namespace std;

class Solution{
public:
bool areAllNine(int num[],int n)
{
    for(int i=0;i<n;i++)
    if(num[i]!=9)
    return false;
    return true;
}
	vector<int> generateNextPalindrome(int num[], int n) {
	    vector<int> v(num,num+n);
	    if(areAllNine(num,n))
	    {
	        v.clear();
	        v.push_back(1);
	        while(n>1)
	        {
	            v.push_back(0);
	            n--;
	        }
	        v.push_back(1);
	        return v;
	    }
	    bool leftSmaller=false;
	    int mid=n/2;
	    int i=mid-1;
	    int j=(n%2)?mid+1:mid;
	    while(i>=0 && v[i]==v[j])
	    {
	        i--;
	        j++;
	    }
	    if(i<0 || v[i]<v[j])
	    leftSmaller=true;
	    while(i>=0)
	    {
	        v[j]=v[i];
	        j++;
	        i--;
	    }
	    if(leftSmaller==true)
	    {
	        int i=mid-1;
	        int carry=1;
	        if(n%2==1)
	        {
	            v[mid]+=carry;
	            carry=v[mid]/10;
	            v[mid]=v[mid]%10;
	            j=mid+1;
	        }
	        else
	        j=mid;
	        while(i>=0)
	        {
	            
	            v[i]+=carry;
	            carry=v[i]/10;
	            v[i]=v[i]%10;
	            v[j]=v[i];
	            i--;
	            j++;
	        }
	    }
	    return v;
	}

};



int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int num[n];
        for (int i = 0; i < n; i++) {
            cin >> num[i];
        }
        Solution ob;
        auto ans = ob.generateNextPalindrome(num, n);
        for (auto x : ans) {
            cout << x << " ";
        }
        cout << "\n";
    }
    return 0;
}
done on gfg