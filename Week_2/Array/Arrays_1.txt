Union and Intersection of two sorted arrays



#include <bits/stdc++.h>
using namespace std;



class Solution{
    public:
    vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        vector<int> v;
        int i=0;
        int j=0;
        int k=0; 
       while(i<n && j<m)
        {
            if(arr1[i]<arr2[j])
            {
                if(k==0 || v[k-1]!=arr1[i])
                {
                v.push_back(arr1[i]);
                k++;
                }
                i++;
                
            }else if(arr1[i]>arr2[j])
            {
               if(k==0 || v[k-1]!=arr2[j])
                {
                v.push_back(arr2[j]);
                k++;
                }
                j++; 
            }else
            {
                if(k==0 || v[k-1]!=arr1[i])
                {
                v.push_back(arr1[i]);
                k++;
                }
                j++;i++;
            }
        }
        while(i<n)
        {
            if(k==0 || v[k-1]!=arr1[i])
                {
                v.push_back(arr1[i]);
                k++;
                }
                i++;
        }
        while(j<m)
        {
             if(k==0 || v[k-1]!=arr2[j])
                {
                v.push_back(arr2[j]);
                k++;
                }
                j++; 
        }
        return v;
    }
};


int main() {
	
	int T;
	cin >> T;
	
	while(T--){
	    
	    
	    
	    int N, M;
	    cin >>N >> M;
	    
	    int arr1[N];
	    int arr2[M];
	    
	    for(int i = 0;i<N;i++){
	        cin >> arr1[i];
	    }
	    
	    for(int i = 0;i<M;i++){
	        cin >> arr2[i];
	    }
	    Solution ob;
	    vector<int> ans = ob.findUnion(arr1,arr2, N, M);
	    for(int i: ans)cout<<i<<' ';
	    cout << endl;
	    
	}
	
	return 0;
}

Intersection


#include<bits/stdc++.h>
using namespace std;



class Solution{
    public:
    int NumberofElementsInIntersection (int a[], int b[], int n, int m )
    {
        sort(a,a+n);
        sort(b,b+m);
        int size=(n>=m)?n:m;
        int arr[size];
        int count=0;
        int i=0,j=0,k=0;
        while(i<n && j<m)
        {
            if(a[i]<b[j])
            i++;
            else if(a[i]>b[j])
            j++;
            else
            {
                if(k==0 || arr[k-1]!=a[i])
                {
                    arr[k]=a[i];
                    k++;
                    count++;
                }
                i++;
                j++;
            }
         }
         return count;
    }
};


int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,m;
		cin>>n>>m;
		int a[n], b[m];
		for(int i=0; i<n; i++)
			cin>>a[i];

		for(int i=0; i<m; i++)
			cin>>b[i];
		Solution ob;
		cout << ob.NumberofElementsInIntersection(a,b,n,m) << endl;
	}
	return 0;
}  
done on gfg