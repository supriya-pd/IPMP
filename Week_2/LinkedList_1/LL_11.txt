Intersection Union of 2 LL

#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};

Node* inputList(int size)
{
    Node *head, *tail;
    int val;
    
    cin>>val;
    head = tail = new Node(val);
    
    while(--size)
    {
        cin>>val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
}




struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};



class Solution{
  public:
    Node* findIntersection(Node* head1, Node* head2)
    {
        unordered_set<int> s;
        Node *head=new Node(0);
        Node *ptr=head;
        while(head2!=NULL)
        {
            //if(s.find(head2->data)==s.end())  // don't need this condition because this method i.e. hashing wala works if there aren't any duplicates
            s.insert(head2->data);
            head2=head2->next;
        }
        while(head1!=NULL)
        {
            if(s.find(head1->data)!=s.end())
            {
                Node *node=new Node(head1->data);
                ptr->next=node;
                ptr=node;
            }
            head1=head1->next;
        }
        head=head->next;
        return head;
    }
};


int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    int n,m;
	    
	    cin>> n;
	    Node* head1 = inputList(n);
	    
	    cin>>m;
	    Node* head2 = inputList(m);
	    Solution obj;
	    Node* result = obj.findIntersection(head1, head2);
	    
	    printList(result);
	    cout<< endl;
	}
	return 0;
}
done on gfg
intersection is done using hashing , union using merge sort
in case you want non decreasing order of result list, use merge sort method only, also beacuse hashing wala method won't work when there are duplictaes plus it also doesn't
give on decreasing order 

but merge sort wala method bhi does not work in case of duplicates because here merge function while merging two sorted linked lists isn't checking that
Eg, 9->6->4->2->3->8
    1->2->8->6->2

after mergesort
2->3->4->6->8->9
1->2->2->6->8

after union,
we get 1->2->2->3->4->6->8->9

but required is 1->2->3->4->6->8->, that's why solution didn't get accepted in gfg
 
#include<bits/stdc++.h>
using namespace std;

struct Node
{
	int data;
	struct Node* next;
	
	Node(int x){
	    data = x;
	    next = NULL;
	}
	
};

struct Node* buildList(int size)
{
    int val;
    cin>> val;
    
    Node* head = new Node(val);
    Node* tail = head;
    
    for(int i=0; i<size-1; i++)
    {
        cin>> val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
    cout<< endl;
}

struct Node* makeUnion(struct Node* head1, struct Node* head2);

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, m;
        
        cin>>n;
        Node* first = buildList(n);
        
        cin>>m;
        Node* second = buildList(m);
        
        printList(makeUnion(first,second));
    }
    return 0;
}


void FrontBackSplit(Node *head,Node **front_ref,Node **back_ref)
{
    if(!head)
    {
        (*front_ref)=head;
        (*back_ref)=head;
        return;
    }
    Node *slow=head;
    Node *fast=head->next;
    while(fast && fast->next)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    (*front_ref)=head;
    (*back_ref)=slow->next;
    slow->next=NULL;
}
Node* SortedMerge(Node *a,Node *b)
{
    if(!a)
    return b;
    if(!b)
    return a;
    Node *result=NULL;
    if(a->data<=b->data)
    {
        result=a;
        result->next=SortedMerge(a->next,b);
    }
    else
    {
        result=b;
        result->next=SortedMerge(a,b->next);
    }
    return result;
}
void mergeSort(Node **head_ref)
{
    if(!(*head_ref) || !((*head_ref)->next))
    return;
    Node *a, *b;
    FrontBackSplit(*head_ref,&a,&b);
    mergeSort(&a);
    mergeSort(&b);
    (*head_ref)=SortedMerge(a,b);
}

struct Node* makeUnion(struct Node* head1, struct Node* head2)
{
    mergeSort(&head1);
    mergeSort(&head2);
    Node *head=new Node(0);
    Node *ptr=head;
    Node *node;
    while(head1 && head2)
    {
        if(head1->data<head2->data)
        {
            node=new Node(head1->data);
            ptr->next=node;
            ptr=node;
            head1=head1->next;
        }else if(head1->data>head2->data)
        {
            node=new Node(head2->data);
            ptr->next=node;
            ptr=node;
            head2=head2->next;
        }else
        {
            node=new Node(head1->data);
            ptr->next=node;
            ptr=node;
            head1=head1->next;
            head2=head2->next;
        }
    }
    while(head1)
    {
         node=new Node(head1->data);
            ptr->next=node;
            ptr=node;
            head1=head1->next;
    }
    while(head2)
    {
        node=new Node(head2->data);
            ptr->next=node;
            ptr=node;
            head2=head2->next;
    }
    head=head->next;
    return head;
}

Now if my merge two sorted ll part of code is checking for repetition, the it works,

struct Node* makeUnion(struct Node* head1, struct Node* head2)
{
    mergeSort(&head1);
    mergeSort(&head2);
    Node *head=new Node(0);
    Node *ptr=head;
    Node *node;
    while(head1 && head2)
    {
        if(head1->data<head2->data)
        {
            if(ptr==head || ptr->data!=head1->data)
           {
            node=new Node(head1->data);
            ptr->next=node;
            ptr=node;
            head1=head1->next;
           }else
           {
               head1=head1->next;
           }
        }else if(head1->data>head2->data)
        {
           if(ptr==head || ptr->data!=head2->data)
           {
            node=new Node(head2->data);
            ptr->next=node;
            ptr=node;
            head2=head2->next;
           }else
           {
               head2=head2->next;
           }
        }else
        {
            if(ptr==head || ptr->data!=head1->data)
           {
            node=new Node(head1->data);
            ptr->next=node;
            ptr=node;
            head1=head1->next;
            head2=head2->next;
           }else
           {
               head2=head2->next;
               head1=head2->next;
           }
        }
    }
    while(head1)
    {
        if(ptr==head || ptr->data!=head1->data)
           {
            node=new Node(head1->data);
            ptr->next=node;
            ptr=node;
            head1=head1->next;
           }else
           {
               head1=head1->next;
           }
    }
    while(head2)
    {
         if(ptr==head || ptr->data!=head2->data)
           {
            node=new Node(head2->data);
            ptr->next=node;
            ptr=node;
            head2=head2->next;
           }else
           {
               head2=head2->next;
           }
    }
    head=head->next;
    return head;
}
