CheckIfLinkedListIspalindrome

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head)
            return true;
        ListNode *middle=getMiddle(head);
        middle->next=reverseLL(middle->next);
        ListNode *ptr1=head;
        ListNode *ptr2=middle->next;
        while(ptr2!=NULL)
        {
            if(ptr1->val!=ptr2->val)
                return false;
            ptr1=ptr1->next;
            ptr2=ptr2->next;
        }
       return true;
    }
    ListNode* getMiddle(ListNode *head)
    {
        if(!head)
            return NULL;
        ListNode *slow=head,*fast=head->next;
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    ListNode* reverseLL(ListNode *head)
    {
        ListNode *prev=NULL,*curr=head,*next;
        while(curr!=NULL)
        {
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        head=prev;
        return head;
    }
};

done on leetcode 234
next do palindrome number and valid palindrome