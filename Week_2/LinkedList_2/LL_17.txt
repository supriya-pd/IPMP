Sort Linked List of 0's 1's 2's


#include <bits/stdc++.h>

using namespace std;

struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

struct Node *start = NULL;



class Solution
{
    public:
    Node* segregate(Node *head)
    {
     Node *zeroD=new Node(0);
     Node *oneD=new Node(1);
     Node *twoD=new Node(2);
     Node *zero=zeroD,*one=oneD,*two=twoD;
     Node *curr=head;
     while(curr!=NULL)
     {
         if(curr->data==0)
         {
             zero->next=curr;
             zero=zero->next;
         }
         else if(curr->data==1)
         {
             one->next=curr;
             one=one->next;
         }else
         {
             two->next=curr;
             two=two->next;
         }
         curr=curr->next;
     }
     zero->next=(oneD->next)?oneD->next:twoD->next;
     one->next=twoD->next;
     two->next=NULL;
     head=zeroD->next;
     delete oneD;
     delete twoD;
     delete zeroD;
     return head;
    }
};





void printList(struct Node *Node) {
    while (Node != NULL) {
        printf("%d ", Node->data);
        Node = Node->next;
    }
    printf("\n");
}
void insert(int n1) {
    int n, value, i;
    //scanf("%d",&n);
    n = n1;
    struct Node *temp;
    for (i = 0; i < n; i++) {
        scanf("%d", &value);

        if (i == 0) {
            start = new Node(value);
            temp = start;
            continue;
        } else {
            temp->next = new Node(value);
            temp = temp->next;
            temp->next = NULL;
        }
    }
}

int main() {

    int n;

    int t;
    scanf("%d", &t);

    while (t--) {
        scanf("%d", &n);

        insert(n);
        Solution ob;
        struct Node *newHead = ob.segregate(start);
        printList(newHead);
    }

    return 0;
}  

done on gfg