Segregate even and odd nodes


#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};
void printList(Node* node) 
{ 
    while (node != NULL) { 
        cout << node->data <<" "; 
        node = node->next; 
    }  
    cout<<"\n";
} 



class Solution{
public:
    Node* divide(int N, Node *head){
        Node *evenD=new Node(0);
        Node *oddD=new Node(0);
        Node *even=evenD;
        Node *odd=oddD;
        Node *curr=head;
        while(curr!=NULL)
        {
            if(curr->data%2==0){
            even->next=curr;
            even=even->next;
        }else{
            odd->next=curr;
            odd=odd->next;
        }
        curr=curr->next;
        }
        even->next=oddD->next;
    odd->next=NULL;
    head=evenD->next;
    return head;
    }
    
};



int main() {
   
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int data;
        cin>>data;
        struct Node *head = new Node(data);
        struct Node *tail = head;
        for (int i = 0; i < N-1; ++i)
        {
            cin>>data;
            tail->next = new Node(data);
            tail = tail->next;
        }
        
        Solution ob;
        Node *ans = ob.divide(N, head);
        printList(ans); 
    }
    return 0;
}
 done on gfg 