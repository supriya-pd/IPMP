Count number of inversions - mergeSort method--gfg

class Solution{
  public:
    
    long long int merge(long long arr[],long long l,long long mid,long long  r)
    {
    long long int inv = 0;
    long long  n1=mid-l+1;
    long long  n2=r-mid;//r-mid-1+1
    long long  a[n1]; long long  b[n2];
    for(long long i=0;i<n1;i++)
    a[i] = arr[l+i];
    for(long long i=0;i<n2;i++)
    b[i] = arr[mid+1+i];
    long long i=0,j=0,k=l;
    while(i<n1 && j<n2)
    {
        if(a[i]<=b[j])
        {
            arr[k]=a[i];
            i++;k++;
        }else
        {
            arr[k]=b[j];
            inv += n1-i;  
            j++;k++;
        }
    }
    while(i<n1)
    {
        arr[k]=a[i];
        i++;k++;
    }
    while(j<n2)
    {
        arr[k]=b[j];
        j++;k++;
    }
    return inv;
}
long long int mergeSort(long long arr[],long long l,long  long r)
{
    long long int inv = 0;
    if(l<r)
    {
        long long mid = (l+r)/2;
        inv += mergeSort(arr,l,mid);
        inv += mergeSort(arr,mid+1,r);
        inv += merge(arr,l,mid,r);
    }
    return inv;
}
long long int inversionCount(long long arr[], long long n)
{
return mergeSort(arr,0,n-1);
}

};