Sort elements by frequency--if frequency is same then smaller element comes first - done on gfg

class Solution{
    public:
    
     bool static compare(tuple<int,int,int> a, tuple<int,int,int> b)
    {
        if(get<2>(a)!=get<2>(b))
            return get<2>(a)>get<2>(b);
        else
            return get<0>(a)<get<0>(b);
    }
    vector<int> sortByFreq(int s[],int n)
    {
        unordered_map<int,pair<int,int>> m; // value, index, frequency
        for(int i=0;i<n;i++)
        {
            if(m.find(s[i])!=m.end())
                m[s[i]].second++;
            else
                m[s[i]]=make_pair(i,1);
        }
        vector<tuple<int,int,int>> v;
        for(auto i: m)
        {
            v.push_back(make_tuple(i.first,i.second.first,i.second.second));
        }
        sort(v.begin(),v.end(),compare);
        vector<int> f;
        int a,b,c=0;
        for(auto i : v)
        {
            tie(a,b,c)=i;
            while(c--)
                f.push_back(a);
        }
        return f;
    }
};