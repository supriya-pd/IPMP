1863 - sum of all subset XOR totals

i used bitmasking - O(n2^n)
-------------------------
class Solution {
public:

    int subsetXORSum(vector<int>& nums) {
        int sum=0;
        int x = 0;
        int n = nums.size(); 
        int s =(int) pow(2,n); 
        for(int i = 0;i<s;i++)  // 0 to say 7 if n=3, 8 times
        {
            for(int j=0;j<n;j++)  
            {
                if(i & (1<<j))  // if jth bit of i is set
                x = x^nums[j];
            }
            sum=sum+x;
            x=0;
        }
        return sum;  
    }
};
------------------------------------
Also, one could use backtracking - u just include extra parameter in function to track xor and sum

class Solution 
{
public:
    void helper(vector<int>& nums,int index,int tmp,int &sum)
    {
        if(index==nums.size())
        {
            sum+=tmp;
            return;
        }
        helper(nums,index+1,tmp^nums[index],sum); // including element at index
        helper(nums,index+1,tmp,sum);  // not including element at index
    }
    int subsetXORSum(vector<int>& nums) 
    {
        int sum=0;
        helper(nums,0,0,sum);
        return sum;
    }
};

--------------------------------------------
1864 - Minimum Number of Swaps to Make the Binary String Alternating

At first, I did sth where I actually swapped by using 2 pointers ....but there are some observations, use them to find minimum swaps- first figure out valid strings and 
then count where they could all valid is different frm invalid

- if number of diff between number of 0 and number of 1 is greater than 1, then no alternating string possible
- valid string can be 
n=1 --> 0 or 1
n=2 --> 01 or 10
n=3 --> 010 or 101
n=4 --> 0101 or 1010
n=5 -->01010 or 10101

if number of 1 is more, clearly n is odd and starts with 1
if equal number of zeroes and 1, n is even and can start with 1 or 0, so we have to find differences in both cases and return minimum


class Solution {
public:
    int count(string s,char c)
    {
        int n=s.length();
        int sw=0;
        for(int i=0;i<n;i=i+2)
        {
            if(s[i]!=c)
                sw++;
        }
        return sw;
    }
    int minSwaps(string s) {
        
        int n=s.length();
        int one=0;
        int zero=0;
        for(int i=0;i<n;i++)
        {
            if(s[i]=='0')
                zero++;
            else
                one++;
        }
        int d = abs(zero-one);
        if(d>1)
            return -1;
        if(zero>one)  // string starts with 0 
            return count(s,'0');
        if(one>zero) // string starts with 1
            return count(s,'1');
        return min(count(s,'0'),count(s,'1')); // string can start either with 0 or with 1
    }
};
-------------------------------------------------------------------------
1865 -  Finding Pairs With a Certain Sum

class FindSumPairs {
public:
    vector<int> nums1;
    vector<int> nums2;
    int n1;
    int n2;
    unordered_map<int,int> m2;
    FindSumPairs(vector<int>& nums1, vector<int>& nums2) {
        this->nums1 = nums1;
        this->nums2 = nums2;
        n1=nums1.size();
        n2 = nums2.size();
        for(int i=0;i<n2;i++)  // here put nums2 in map because it was larger size
        {
            m2[nums2[i]]++;
        }
    }
    
    void add(int index, int val) {
        m2[nums2[index]]--;
        if(m2[nums2[index]]==0)
            m2.erase(nums2[index]);
         nums2[index]+=val;
        m2[nums2[index]]++;
    }
    
    int count(int tot) {
       
        int p = 0;

        for(int i=0;i<n1;i++)  // here we only iterate one array, smaller one and larger is in hash map so constant time to search it
        {
            if(m2.find(tot-nums1[i])!=m2.end())
            {
                p=p+m2.find(tot-nums1[i])->second;
            }
        }
        return p;
    }
};
-------------------------------------
1866. Number of Ways to Rearrange Sticks With K Sticks Visible - dp - try to think base case and what if we fix the position of one stick, how can we generate ans from
base


