Given a binary tree, if parent is 0, then left child is 0 and right child is 1. if parent is 1, then left child is 1 and right child is 0. Root of the tree is 0. 
Find the kth node value which is present at Nth level

-always complete..infinite levels are there
-say level starts with 0, then 1 <= k <= 2^l 


                                                0
                                               01
                                           0110
                                       0110 1001                    

                         0110  1001  1001 0110
                   0110    1001   1001  0110   1001 0110   0110 1001

-- if u notice then ANY LEVEL OF TREE IS GENERATED BY TAKING PREVIOUS LEVEL AND concatenate with !(each value in prev level)



#include <bits/stdc++.h>
using namespace std;

int func(vector<int>& v,int n,int k)
{
	if(n==0)
	return v[k-1];
	
	int s = v.size();
	int i=0;
	while(i<s)
	{
		v.push_back(!v[i]);
		i++;
	}
	return func(v,n-1,k);
}
int main()
{
	int n;
	int k;
	cin>>n>>k;
	vector<int> v;
	v.push_back(0);
	cout<<func(v,n,k);
}

